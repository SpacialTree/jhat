
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/plot_c_miri.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_plot_c_miri.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_plot_c_miri.py:


=========
JWST MIRI
=========

Aligning JWST MIRI images with JHAT.

.. GENERATED FROM PYTHON SOURCE LINES 10-12

An example MIRI Dataset is downloaded, and then a series of
alignment methods are used.

.. GENERATED FROM PYTHON SOURCE LINES 12-26

.. code-block:: default

   

    import sys,os,glob
    from astropy.io import fits
    from astropy.table import Table
    import numpy as np
    import matplotlib.pyplot as plt
    from astroquery.mast import Observations
    from astropy.visualization import (simple_norm,LinearStretch)

    import jhat
    from jhat import hst_photclass,st_wcs_align









.. GENERATED FROM PYTHON SOURCE LINES 27-32

**Download some Data**

For this example we download 2 HST FLT images from MAST. They're
the same filter and same field, just separated in time. Note that 
the code will also work for drizzled images.

.. GENERATED FROM PYTHON SOURCE LINES 32-49

.. code-block:: default


    obs_table = Observations.query_criteria(obs_id='hst_16264_13_wfc3_ir_f160w_iebc13')
    obs_table1 = obs_table[obs_table['filters']=='F160W']

    obs_table = Observations.query_criteria(obs_id='hst_16264_14_wfc3_ir_f160w_iebc14')
    obs_table2 = obs_table[obs_table['filters']=='F160W']

    data_products_by_obs = Observations.get_product_list(obs_table1)
    data_products_by_obs = data_products_by_obs[data_products_by_obs['calib_level']==2]
    data_products_by_obs = data_products_by_obs[data_products_by_obs['productSubGroupDescription']=='FLT'][0]
    Observations.download_products(data_products_by_obs,extension='fits')

    data_products_by_obs = Observations.get_product_list(obs_table2)
    data_products_by_obs = data_products_by_obs[data_products_by_obs['calib_level']==2]
    data_products_by_obs = data_products_by_obs[data_products_by_obs['productSubGroupDescription']=='FLT'][0]
    Observations.download_products(data_products_by_obs,extension='fits')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading URL https://mast.stsci.edu/api/v0.1/Download/file?uri=mast:HST/product/hst_16264_13_wfc3_ir_f160w_iebc13dy_flt.fits to ./mastDownload/HST/hst_16264_13_wfc3_ir_f160w_iebc13dy/hst_16264_13_wfc3_ir_f160w_iebc13dy_flt.fits ... [Done]
    Downloading URL https://mast.stsci.edu/api/v0.1/Download/file?uri=mast:HST/product/hst_16264_14_wfc3_ir_f160w_iebc14qj_flt.fits to ./mastDownload/HST/hst_16264_14_wfc3_ir_f160w_iebc14qj/hst_16264_14_wfc3_ir_f160w_iebc14qj_flt.fits ... [Done]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div><i>Table length=1</i>
    <table id="table140324511317104" class="table-striped table-bordered table-condensed">
    <thead><tr><th>Local Path</th><th>Status</th><th>Message</th><th>URL</th></tr></thead>
    <thead><tr><th>str99</th><th>str8</th><th>object</th><th>object</th></tr></thead>
    <tr><td>./mastDownload/HST/hst_16264_14_wfc3_ir_f160w_iebc14qj/hst_16264_14_wfc3_ir_f160w_iebc14qj_flt.fits</td><td>COMPLETE</td><td>None</td><td>None</td></tr>
    </table></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 50-52

**Examine the Reference Image**


.. GENERATED FROM PYTHON SOURCE LINES 52-68

.. code-block:: default


    files = glob.glob('mastDownload/HST/*/*flt.fits')
    ref_image = files[0]
    align_image = files[1]
    #ref_data = fits.open(ref_image)['SCI',1].data
    #norm1 = simple_norm(ref_data,stretch='log',min_cut=-1,max_cut=15)

    # #plt.imshow(ref_data, origin='lower',
    #                       #interval=MinMaxInterval(),
    #                       norm=norm1,cmap='gray')
    x = np.linspace(0, 2 * np.pi, 100)
    y = np.sin(x)
    # fig = plt.figure()
    plt.plot(x, y)
    plt.xlabel(r'$x$')
    plt.ylabel(r'$\sin(x)$')
    plt.show()


.. image-sg:: /examples/images/sphx_glr_plot_c_miri_001.png
   :alt: plot c miri
   :srcset: /examples/images/sphx_glr_plot_c_miri_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  6.094 seconds)


.. _sphx_glr_download_examples_plot_c_miri.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_c_miri.py <plot_c_miri.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_c_miri.ipynb <plot_c_miri.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
